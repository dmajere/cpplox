program -> declaration* EOF;
declaration -> funcDeclaration 
             | varDeclaration 
             | classDeclaration
             | statement;
classDeclaration -> "class" IDENTIFIER ("<" IDENTIFIER)? "{" function* "}";
funcDeclaration -> "fun" function;
function -> IDENTIFIER "(" parameters? ")" block;
parameters -> IDENTIFIER ("," IDENTIFIER)* ;
varDeclaration -> "var" IDENTIFIER ( "=" sequence)? ";";
statement -> exprStatement 
           | whileStatement
           | forStatement
           | ifStatement
           | block
           | return
           | printStatement; 
exprStatement -> sequence ";"
printStatement -> "print" sequence;
block -> "{" declaration* "}";
ifStatement -> "if" "(" sequence ")" statement ("else" statement)?;
whileStatement -> "while" "(" sequence ")" statement | CONTINUE | BREAK;
forStatement -> "for" "(" (varDeclaration | exprStatement | ";")
                          sequence? ";"
                          sequence? ")" statement | CONTINUE | BREAK;

sequence -> expression ("," expression)*;
expression -> assignment ;
assignment -> (call "." )? IDENTIFIER "=" assignment | ternary | logic_or;
logic_or -> logic_and ("or"  logic_and)*;
logic_and -> equality ("and" equality)*;
ternary -> sequence "?" sequence (: sequence)?;
equality -> comparison ( ("!=" | "==") comparison)*;
comparison -> term ( (">" | ">=" | "<" | "=<") term)*;
term -> factor ( ("-" | "+") factor)*;
factor -> unary ( ("/" | "*") unary)*;
unary -> ("!" | "-" | "--" | "++" ) unary | call;
call -> primary ( "(" arguments? ")"  | "." IDENTIFIER )* ;
arguments -> sequence;

primary -> NUMBER 
         | STRING 
         | IDENTIFIER 
         | "true" 
         | "false" 
         | "nil" 
         | "super" "." IDENTIFIER
         | "(" expression ")";